!function(Q){var I={};function g(C){if(I[C])return I[C].exports;var n=I[C]={i:C,l:!1,exports:{}};return Q[C].call(n.exports,n,n.exports,g),n.l=!0,n.exports}g.m=Q,g.c=I,g.d=function(Q,I,C){g.o(Q,I)||Object.defineProperty(Q,I,{enumerable:!0,get:C})},g.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},g.t=function(Q,I){if(1&I&&(Q=g(Q)),8&I)return Q;if(4&I&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var C=Object.create(null);if(g.r(C),Object.defineProperty(C,"default",{enumerable:!0,value:Q}),2&I&&"string"!=typeof Q)for(var n in Q)g.d(C,n,function(I){return Q[I]}.bind(null,n));return C},g.n=function(Q){var I=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return g.d(I,"a",I),I},g.o=function(Q,I){return Object.prototype.hasOwnProperty.call(Q,I)},g.p="./",g(g.s=5)}([function(module,exports){eval("jQuery(function () {\n  $('.formEclectic').eclecticSlider();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9zbGlkZXItY2FsbC50cz85ODRlIl0sIm5hbWVzIjpbImpRdWVyeSIsIiQiLCJlY2xlY3RpY1NsaWRlciJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBRSxZQUFXO0FBQ2pCQyxHQUFDLENBQUMsZUFBRCxDQUFELENBQW1CQyxjQUFuQjtBQUNELENBRkssQ0FBTiIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsialF1ZXJ5KCBmdW5jdGlvbigpIHtcclxuICAkKCcuZm9ybUVjbGVjdGljJykuZWNsZWN0aWNTbGlkZXIoKTtcclxufSApOyAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9mc2Qtc2xpZGVyLmxlc3M/NDYyZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){eval('var pug = __webpack_require__(3);\n\nfunction template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\\u003Chtml\\u003E\\n\\u003Chead\\u003E\\n\\u003Ctitle\\u003EFSD slider plugin\\u003C\\u002Ftitle\\u003E\\n\\u003Cscript src=\\"https:\\u002F\\u002Fcode.jquery.com\\u002Fjquery-1.12.4.js\\"\\u003E\\u003C\\u002Fscript\\u003E\\n\\u003C\\u002Fhead\\u003E\\n\\u003Cbody\\u003E\\n\\u003Cform class=\'formEclectic\'\\u003E\\u003C\\u002Fform\\u003E\\n\\u003C\\u002Fbody\\u003E\\n\\u003C\\u002Fhtml\\u003E";;return pug_html;};\nmodule.exports = template;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9mc2Qtc2xpZGVyLnB1Zz85ZTZmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFVBQVUsbUJBQU8sQ0FBQyxDQUEwQzs7QUFFNUQsMkJBQTJCLGtDQUFrQyxhQUFhLDBYQUEwWDtBQUNwYyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHB1ZyA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3B1Zy1ydW50aW1lL2luZGV4LmpzXCIpO1xuXG5mdW5jdGlvbiB0ZW1wbGF0ZShsb2NhbHMpIHt2YXIgcHVnX2h0bWwgPSBcIlwiLCBwdWdfbWl4aW5zID0ge30sIHB1Z19pbnRlcnA7cHVnX2h0bWwgPSBwdWdfaHRtbCArIFwiXFx1MDAzQ2h0bWxcXHUwMDNFXFxuXFx1MDAzQ2hlYWRcXHUwMDNFXFxuXFx1MDAzQ3RpdGxlXFx1MDAzRUZTRCBzbGlkZXIgcGx1Z2luXFx1MDAzQ1xcdTAwMkZ0aXRsZVxcdTAwM0VcXG5cXHUwMDNDc2NyaXB0IHNyYz1cXFwiaHR0cHM6XFx1MDAyRlxcdTAwMkZjb2RlLmpxdWVyeS5jb21cXHUwMDJGanF1ZXJ5LTEuMTIuNC5qc1xcXCJcXHUwMDNFXFx1MDAzQ1xcdTAwMkZzY3JpcHRcXHUwMDNFXFxuXFx1MDAzQ1xcdTAwMkZoZWFkXFx1MDAzRVxcblxcdTAwM0Nib2R5XFx1MDAzRVxcblxcdTAwM0Nmb3JtIGNsYXNzPSdmb3JtRWNsZWN0aWMnXFx1MDAzRVxcdTAwM0NcXHUwMDJGZm9ybVxcdTAwM0VcXG5cXHUwMDNDXFx1MDAyRmJvZHlcXHUwMDNFXFxuXFx1MDAzQ1xcdTAwMkZodG1sXFx1MDAzRVwiOztyZXR1cm4gcHVnX2h0bWw7fTtcbm1vZHVsZS5leHBvcnRzID0gdGVtcGxhdGU7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar pug_has_own_property = Object.prototype.hasOwnProperty;\n\n/**\n * Merge two attribute objects giving precedence\n * to values in object `b`. Classes are special-cased\n * allowing for arrays and merging/joining appropriately\n * resulting in a string.\n *\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n * @api private\n */\n\nexports.merge = pug_merge;\nfunction pug_merge(a, b) {\n  if (arguments.length === 1) {\n    var attrs = a[0];\n    for (var i = 1; i < a.length; i++) {\n      attrs = pug_merge(attrs, a[i]);\n    }\n    return attrs;\n  }\n\n  for (var key in b) {\n    if (key === 'class') {\n      var valA = a[key] || [];\n      a[key] = (Array.isArray(valA) ? valA : [valA]).concat(b[key] || []);\n    } else if (key === 'style') {\n      var valA = pug_style(a[key]);\n      valA = valA && valA[valA.length - 1] !== ';' ? valA + ';' : valA;\n      var valB = pug_style(b[key]);\n      valB = valB && valB[valB.length - 1] !== ';' ? valB + ';' : valB;\n      a[key] = valA + valB;\n    } else {\n      a[key] = b[key];\n    }\n  }\n\n  return a;\n};\n\n/**\n * Process array, object, or string as a string of classes delimited by a space.\n *\n * If `val` is an array, all members of it and its subarrays are counted as\n * classes. If `escaping` is an array, then whether or not the item in `val` is\n * escaped depends on the corresponding item in `escaping`. If `escaping` is\n * not an array, no escaping is done.\n *\n * If `val` is an object, all the keys whose value is truthy are counted as\n * classes. No escaping is done.\n *\n * If `val` is a string, it is counted as a class. No escaping is done.\n *\n * @param {(Array.<string>|Object.<string, boolean>|string)} val\n * @param {?Array.<string>} escaping\n * @return {String}\n */\nexports.classes = pug_classes;\nfunction pug_classes_array(val, escaping) {\n  var classString = '', className, padding = '', escapeEnabled = Array.isArray(escaping);\n  for (var i = 0; i < val.length; i++) {\n    className = pug_classes(val[i]);\n    if (!className) continue;\n    escapeEnabled && escaping[i] && (className = pug_escape(className));\n    classString = classString + padding + className;\n    padding = ' ';\n  }\n  return classString;\n}\nfunction pug_classes_object(val) {\n  var classString = '', padding = '';\n  for (var key in val) {\n    if (key && val[key] && pug_has_own_property.call(val, key)) {\n      classString = classString + padding + key;\n      padding = ' ';\n    }\n  }\n  return classString;\n}\nfunction pug_classes(val, escaping) {\n  if (Array.isArray(val)) {\n    return pug_classes_array(val, escaping);\n  } else if (val && typeof val === 'object') {\n    return pug_classes_object(val);\n  } else {\n    return val || '';\n  }\n}\n\n/**\n * Convert object or string to a string of CSS styles delimited by a semicolon.\n *\n * @param {(Object.<string, string>|string)} val\n * @return {String}\n */\n\nexports.style = pug_style;\nfunction pug_style(val) {\n  if (!val) return '';\n  if (typeof val === 'object') {\n    var out = '';\n    for (var style in val) {\n      /* istanbul ignore else */\n      if (pug_has_own_property.call(val, style)) {\n        out = out + style + ':' + val[style] + ';';\n      }\n    }\n    return out;\n  } else {\n    return val + '';\n  }\n};\n\n/**\n * Render the given attribute.\n *\n * @param {String} key\n * @param {String} val\n * @param {Boolean} escaped\n * @param {Boolean} terse\n * @return {String}\n */\nexports.attr = pug_attr;\nfunction pug_attr(key, val, escaped, terse) {\n  if (val === false || val == null || !val && (key === 'class' || key === 'style')) {\n    return '';\n  }\n  if (val === true) {\n    return ' ' + (terse ? key : key + '=\"' + key + '\"');\n  }\n  var type = typeof val;\n  if ((type === 'object' || type === 'function') && typeof val.toJSON === 'function') {\n    val = val.toJSON();\n  }\n  if (typeof val !== 'string') {\n    val = JSON.stringify(val);\n    if (!escaped && val.indexOf('\"') !== -1) {\n      return ' ' + key + '=\\'' + val.replace(/'/g, '&#39;') + '\\'';\n    }\n  }\n  if (escaped) val = pug_escape(val);\n  return ' ' + key + '=\"' + val + '\"';\n};\n\n/**\n * Render the given attributes object.\n *\n * @param {Object} obj\n * @param {Object} terse whether to use HTML5 terse boolean attributes\n * @return {String}\n */\nexports.attrs = pug_attrs;\nfunction pug_attrs(obj, terse){\n  var attrs = '';\n\n  for (var key in obj) {\n    if (pug_has_own_property.call(obj, key)) {\n      var val = obj[key];\n\n      if ('class' === key) {\n        val = pug_classes(val);\n        attrs = pug_attr(key, val, false, terse) + attrs;\n        continue;\n      }\n      if ('style' === key) {\n        val = pug_style(val);\n      }\n      attrs += pug_attr(key, val, false, terse);\n    }\n  }\n\n  return attrs;\n};\n\n/**\n * Escape the given string of `html`.\n *\n * @param {String} html\n * @return {String}\n * @api private\n */\n\nvar pug_match_html = /[\"&<>]/;\nexports.escape = pug_escape;\nfunction pug_escape(_html){\n  var html = '' + _html;\n  var regexResult = pug_match_html.exec(html);\n  if (!regexResult) return _html;\n\n  var result = '';\n  var i, lastIndex, escape;\n  for (i = regexResult.index, lastIndex = 0; i < html.length; i++) {\n    switch (html.charCodeAt(i)) {\n      case 34: escape = '&quot;'; break;\n      case 38: escape = '&amp;'; break;\n      case 60: escape = '&lt;'; break;\n      case 62: escape = '&gt;'; break;\n      default: continue;\n    }\n    if (lastIndex !== i) result += html.substring(lastIndex, i);\n    lastIndex = i + 1;\n    result += escape;\n  }\n  if (lastIndex !== i) return result + html.substring(lastIndex, i);\n  else return result;\n};\n\n/**\n * Re-throw the given `err` in context to the\n * the pug in `filename` at the given `lineno`.\n *\n * @param {Error} err\n * @param {String} filename\n * @param {String} lineno\n * @param {String} str original source\n * @api private\n */\n\nexports.rethrow = pug_rethrow;\nfunction pug_rethrow(err, filename, lineno, str){\n  if (!(err instanceof Error)) throw err;\n  if ((typeof window != 'undefined' || !filename) && !str) {\n    err.message += ' on line ' + lineno;\n    throw err;\n  }\n  try {\n    str = str || __webpack_require__(4).readFileSync(filename, 'utf8')\n  } catch (ex) {\n    pug_rethrow(err, null, lineno)\n  }\n  var context = 3\n    , lines = str.split('\\n')\n    , start = Math.max(lineno - context, 0)\n    , end = Math.min(lines.length, lineno + context);\n\n  // Error context\n  var context = lines.slice(start, end).map(function(line, i){\n    var curr = i + start + 1;\n    return (curr == lineno ? '  > ' : '    ')\n      + curr\n      + '| '\n      + line;\n  }).join('\\n');\n\n  // Alter exception message\n  err.path = filename;\n  err.message = (filename || 'Pug') + ':' + lineno\n    + '\\n' + context + '\\n\\n' + err.message;\n  throw err;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n")},function(module,exports){eval("/* (ignored) *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZnMgKGlnbm9yZWQpP2QyYjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIChpZ25vcmVkKSAqLyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/modules/fsd-slider.ts\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Model = /*#__PURE__*/function () {\n  function Model() {\n    _classCallCheck(this, Model);\n\n    _defineProperty(this, \"defaultValue_1\", void 0);\n\n    _defineProperty(this, \"defaultValue_2\", void 0);\n\n    this.defaultValue_1 = 0;\n    this.defaultValue_2 = 100;\n  }\n\n  _createClass(Model, [{\n    key: \"parseNumber\",\n    value: function parseNumber(val, step) {\n      if (Number.isSafeInteger(step)) {\n        val = parseInt(val);\n      } else {\n        val = parseFloat(val);\n      }\n\n      return val;\n    }\n  }, {\n    key: \"countNumber\",\n    value: function countNumber(id, coords, min, max, step) {\n      if (id === 'run-contain-1') {\n        this.defaultValue_1 = this.parseNumber(min + (coords.contain_1.left - coords.line_coords.left) * max * step / coords.line_coords.width, step);\n        return this.defaultValue_1;\n      } else {\n        this.defaultValue_2 = this.parseNumber(min + (coords.contain_2.left - coords.line_coords.left) * max * step / coords.line_coords.width, step);\n        return this.defaultValue_2;\n      }\n    }\n  }, {\n    key: \"checkValue\",\n    value: function checkValue(id, coords, min, max, step, value) {\n      var res;\n\n      if (value % step === 0) {\n        res = value;\n      } else {\n        if (value % step >= step / 2) {\n          res = step * (value / step + 1);\n        } else {\n          res = step * (value / step - 1);\n        }\n      }\n\n      if (res > max) {\n        res = max;\n      } else if (res < min) {\n        res = min;\n      }\n\n      if (id === 'input_for_1' && res !== max && res !== min) {\n        if (coords.contain_2) {\n          if (res < this.defaultValue_2) {\n            this.defaultValue_1 = res;\n          } else {\n            this.defaultValue_1 = this.defaultValue_2;\n          }\n        } else {\n          this.defaultValue_1 = res;\n        }\n\n        return this.defaultValue_1;\n      } else if (id === 'input_for_2' && res !== max && res !== min) {\n        if (res > this.defaultValue_1) {\n          this.defaultValue_2 = res;\n        } else {\n          this.defaultValue_2 = this.defaultValue_1;\n        }\n\n        return this.defaultValue_2;\n      }\n    }\n  }, {\n    key: \"countRunnersCoords\",\n    value: function countRunnersCoords(val, coords, min, max, step) {\n      var run_left = (val - min) * coords.line_coords.width / (max * step);\n      return run_left;\n    }\n  }]);\n\n  return Model;\n}();\n\nvar View = /*#__PURE__*/function () {\n  function View() {\n    _classCallCheck(this, View);\n\n    _defineProperty(this, \"form\", void 0);\n\n    _defineProperty(this, \"field\", void 0);\n\n    _defineProperty(this, \"interval_button\", void 0);\n\n    _defineProperty(this, \"range_button\", void 0);\n\n    _defineProperty(this, \"run_contain_1\", void 0);\n\n    _defineProperty(this, \"run_contain_2\", void 0);\n\n    _defineProperty(this, \"run_1\", void 0);\n\n    _defineProperty(this, \"run_2\", void 0);\n\n    _defineProperty(this, \"input_1\", void 0);\n\n    _defineProperty(this, \"input_2\", void 0);\n\n    _defineProperty(this, \"empty_field\", void 0);\n\n    _defineProperty(this, \"coords\", void 0);\n\n    _defineProperty(this, \"input_val_1\", 0);\n\n    _defineProperty(this, \"input_val_2\", 100);\n\n    _defineProperty(this, \"_inputs_array\", void 0);\n\n    _defineProperty(this, \"_runs_array\", void 0);\n\n    this.field = document.createElement('div');\n    this.field.id = 'slider-field';\n    this.interval_button = document.createElement('button');\n    this.interval_button.id = 'interval-button';\n    this.interval_button.textContent = 'go to range';\n    this.range_button = document.createElement('button');\n    this.range_button.id = 'range-button';\n    this.range_button.textContent = 'add numbers';\n    this.input_1 = document.createElement('input');\n    this.input_1.placeholder = this.input_val_1.toString();\n    this.input_1.classList.add('input_for_slider');\n    this.input_1.id = 'input_for_1';\n    this.run_contain_1 = document.createElement('div');\n    this.run_contain_1.classList.add('run-container');\n    this.run_contain_1.id = 'run-contain-1';\n    this.run_1 = document.createElement('span');\n    this.run_1.classList.add('runner');\n    this.run_1.id = 'runner-1';\n    this.empty_field = document.createElement('div');\n    this.empty_field.id = 'empty-field';\n    this.run_contain_1.append(this.run_1);\n    this.field.append(this.run_contain_1);\n    this._runs_array = document.querySelectorAll('.run-container');\n    this._inputs_array = document.querySelectorAll('.input_for_slider');\n    this.form = document.querySelector('.formEclectic');\n    this.form.append(this.interval_button, this.range_button, this.field, this.input_1);\n\n    this._setStartCoords();\n  }\n\n  _createClass(View, [{\n    key: \"_setStartCoords\",\n    value: function _setStartCoords() {\n      this.coords = {\n        line_coords: this.field.getBoundingClientRect(),\n        contain_1: this.run_contain_1.getBoundingClientRect(),\n        delta_1: 0\n      };\n    }\n  }, {\n    key: \"_resetCoords\",\n    value: function _resetCoords(e) {\n      this.coords = {\n        line_coords: this.field.getBoundingClientRect(),\n        contain_1: this.run_contain_1.getBoundingClientRect(),\n        delta_1: e.clientX - this.run_contain_1.getBoundingClientRect().left\n      };\n\n      if (this._returnRuns.length > 1) {\n        this.coords.contain_2 = this.run_contain_2.getBoundingClientRect();\n        this.coords.delta_2 = e.clientX - this.run_contain_2.getBoundingClientRect().left;\n      }\n\n      return this.coords;\n    }\n  }, {\n    key: \"_countMoveAt\",\n    value: function _countMoveAt(id, pageX, parse_num, step) {\n      var res, pre;\n\n      if (id === 'run-contain-1') {\n        res = this.coords.contain_1.left;\n        pre = parse_num((pageX - this.coords.delta_1 - this.coords.line_coords.left) * step, step);\n        console.log(pre);\n        console.log(this.coords);\n\n        if (pre >= 0 && pre <= this.coords.line_coords.width) {\n          if (this.coords.contain_2) {\n            if (pre <= this.coords.contain_2.left - this.coords.contain_2.width - this.coords.line_coords.left) res = pre;\n          } else {\n            res = pre;\n          }\n        }\n      } else {\n        res = this.coords.contain_2.left;\n        pre = parse_num((pageX - this.coords.delta_2 - this.coords.line_coords.left) * step, step);\n\n        if (pre <= this.coords.line_coords.width - this.coords.contain_2.width && pre >= this.coords.contain_1.right - this.coords.line_coords.left) {\n          console.log(pre, 4);\n          res = pre;\n        }\n      }\n\n      return res;\n    }\n  }, {\n    key: \"_changeRunsNums\",\n    value: function _changeRunsNums(val, run) {\n      if (run.firstChild.classList.contains('val-changer')) run.firstChild.textContent = val;\n    }\n  }, {\n    key: \"_changeInputVal\",\n    value: function _changeInputVal(val, index) {\n      if (this._returnInputs) this._returnInputs[index].value = val;\n    }\n  }, {\n    key: \"bindChangeInputValue\",\n    value: function bindChangeInputValue(check_val, coords_from_input) {\n      var _this = this;\n\n      this._returnInputs.forEach(function (inp, index) {\n        inp.addEventListener('input', function (e) {\n          var correct_val = check_val(inp.id, _this.coords, inp.value);\n          inp.value = correct_val;\n          var lf = coords_from_input(correct_val, _this.coords);\n          _this._runs_array[index].style.left = lf;\n\n          _this._changeRunsNums(correct_val, _this._runs_array[index]);\n        });\n      });\n    }\n  }, {\n    key: \"moveRuns\",\n    value: function moveRuns(count_val, parse_num, step) {\n      var _this2 = this;\n\n      this._returnRuns.forEach(function (run, index) {\n        run.onmousedown = function (e) {\n          run.ondragstart = function (e) {\n            return false;\n          };\n\n          var coords = _this2._resetCoords(e);\n\n          document.onmousemove = function (e) {\n            var lf = _this2._countMoveAt(run.id, e.pageX, parse_num, step);\n\n            console.log(lf, 5);\n\n            if (typeof lf === 'number') {\n              run.style.left = lf + 'px';\n              coords = _this2._resetCoords(e);\n              var val = count_val(run.id, coords);\n\n              _this2._changeInputVal(val, index);\n\n              _this2._changeRunsNums(val, run);\n            }\n          };\n\n          document.onmouseup = function (e) {\n            document.onmousemove = null;\n            document.onmouseup = null;\n          };\n        };\n      });\n    }\n  }, {\n    key: \"bindAddLegend\",\n    value: function bindAddLegend(count_num) {\n      var _this3 = this;\n\n      this.range_button.addEventListener('click', function (e) {\n        e.preventDefault();\n        _this3.range_button.textContent = _this3.range_button.textContent === 'add numbers' ? 'remove numbers' : 'add numbers';\n\n        _this3.addRemoveNums(count_num);\n      });\n    }\n  }, {\n    key: \"addRunner\",\n    value: function addRunner() {\n      this.run_2 = document.createElement('span');\n      this.run_contain_2 = document.createElement('div');\n      this.run_contain_2.classList.add('run-container');\n      this.run_contain_2.id = 'run-contain-2';\n      this.run_contain_2.style = this.run_contain_1.style;\n      this.run_contain_2.style.right = 0 .toString();\n      this.run_2.classList.add('runner');\n      this.run_2.id = 'runner-2';\n      this.run_2.value = this.input_val_2;\n      this.run_2.style = this.run_1.style;\n      this.run_contain_2.append(this.run_2);\n      this.field.append(this.run_contain_2);\n    }\n  }, {\n    key: \"addRemoveRunner\",\n    value: function addRemoveRunner() {\n      if (this.interval_button.textContent === 'go to single') {\n        this.addRunner();\n      } else {\n        if (this.field.lastChild.id === 'run-contain-2') {\n          this.field.removeChild(this.field.lastChild);\n        }\n      }\n    }\n  }, {\n    key: \"_addInput\",\n    value: function _addInput() {\n      this.input_2 = document.createElement('input');\n      this.input_2.classList.add('input_for_slider');\n      this.input_2.id = 'input_for_2';\n      this.input_2.style = this.input_1.style;\n      this.input_2.style.left = 30 .toString();\n      this.form.append(this.input_2);\n    }\n  }, {\n    key: \"addRemoveInput\",\n    value: function addRemoveInput() {\n      if (this.interval_button.textContent === 'go to single') {\n        this._addInput();\n      } else {\n        if (this.form.lastChild.id === 'input_for_2') this.form.removeChild(this.form.lastChild);\n      }\n    }\n  }, {\n    key: \"_defineRuns\",\n    value: function _defineRuns() {\n      this._runs_array = document.querySelectorAll('.run-container');\n      return this._runs_array;\n    }\n  }, {\n    key: \"_defineInputs\",\n    value: function _defineInputs() {\n      this._inputs_array = document.querySelectorAll('.input_for_slider');\n      return this._inputs_array;\n    }\n  }, {\n    key: \"bindSlidersAdd\",\n    value: function bindSlidersAdd(count_val, check_val, parse_num, coords_from_input, step) {\n      var _this4 = this;\n\n      this.interval_button.addEventListener('click', function (e) {\n        e.preventDefault();\n        _this4.interval_button.textContent = _this4.interval_button.textContent === 'go to range' ? 'go to single' : 'go to range';\n\n        _this4.addRemoveRunner();\n\n        _this4.addRemoveInput();\n\n        _this4._defineRuns();\n\n        _this4._defineInputs();\n\n        _this4.moveRuns(count_val, parse_num, step);\n\n        _this4.addRemoveNums(count_val);\n\n        _this4.bindChangeInputValue(check_val, coords_from_input);\n      });\n    }\n  }, {\n    key: \"addNums\",\n    value: function addNums(count_num) {\n      var _this5 = this;\n\n      this._returnRuns.forEach(function (run, index) {\n        var span = document.createElement('span');\n        span.innerText = count_num(run.id, _this5._coordsElem);\n        span.id = 'current-number' + index;\n        span.classList.add('change-number');\n        run.prepend(span);\n      });\n    }\n  }, {\n    key: \"sliderActive\",\n    value: function sliderActive(coords_from_input, parse_num, step) {\n      var _this6 = this;\n\n      this.field.addEventListener('click', function (e) {\n        console.log(10);\n\n        if (!e.target.classList.contains('runner') && !e.target.classList.contains('change-number')) {\n          var lf = _this6._countMoveAt(e.target.parentNode.id, e.target.pageX, parse_num, step);\n\n          if (typeof lf === 'number') {\n            _this6._runs_array[0].style.left = lf;\n            var val = coords_from_input(lf, _this6._coordsElem);\n\n            _this6._changeInputVal(val, 0);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"addRemoveNums\",\n    value: function addRemoveNums(count_num) {\n      if (this.range_button.textContent === 'remove numbers') {\n        this.addNums(count_num);\n      } else {\n        this._returnRuns.forEach(function (run) {\n          if (run.firstChild.classList.contains('change-number')) run.removeChild(run.firstChild);\n        });\n      }\n    }\n  }, {\n    key: \"_returnRuns\",\n    get: function get() {\n      return this._runs_array;\n    }\n  }, {\n    key: \"_returnInputs\",\n    get: function get() {\n      return this._inputs_array;\n    }\n  }, {\n    key: \"_coordsElem\",\n    get: function get() {\n      return this.coords;\n    }\n  }]);\n\n  return View;\n}();\n\nvar Controller = /*#__PURE__*/function () {\n  function Controller(view, model) {\n    var _this7 = this;\n\n    _classCallCheck(this, Controller);\n\n    _defineProperty(this, \"view\", void 0);\n\n    _defineProperty(this, \"model\", void 0);\n\n    _defineProperty(this, \"min\", void 0);\n\n    _defineProperty(this, \"max\", void 0);\n\n    _defineProperty(this, \"step\", void 0);\n\n    _defineProperty(this, \"handleParseNum\", function (val) {\n      return _this7.model.parseNumber(val, _this7.step);\n    });\n\n    _defineProperty(this, \"handleCountVal\", function (id, coords) {\n      return _this7.model.countNumber(id, coords, _this7.min, _this7.max, _this7.step);\n    });\n\n    _defineProperty(this, \"handleCheckValue\", function (id, coords, value) {\n      return _this7.model.checkValue(id, coords, _this7.min, _this7.max, _this7.step, value);\n    });\n\n    _defineProperty(this, \"handleCountRunCoords\", function (val, coords) {\n      return _this7.model.countRunnersCoords(val, coords, _this7.min, _this7.max, _this7.step);\n    });\n\n    this.view = view;\n    this.model = model;\n    this.min = 0;\n    this.max = 100;\n    this.step = 1;\n    this.view.moveRuns(this.handleCountVal, this.handleParseNum, this.step);\n    this.view.bindChangeInputValue(this.handleCheckValue, this.handleCountRunCoords);\n    this.view.bindSlidersAdd(this.handleCountVal, this.handleCheckValue, this.handleParseNum, this.handleCountRunCoords, this.step);\n    this.view.bindAddLegend(this.handleCountVal);\n  }\n\n  _createClass(Controller, [{\n    key: \"handleSliderActive\",\n    value: function handleSliderActive() {\n      this.view.sliderActive(this.handleCountRunCoords, this.handleParseNum, this.step);\n    }\n  }]);\n\n  return Controller;\n}();\n\n\n// CONCATENATED MODULE: ./src/modules/jquery-style.ts\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n\n(function ($) {\n  $.fn.eclecticSlider = function (methods) {\n    if (_typeof(methods) === 'object') {\n      var slider = new Controller(new View(), new Model());\n      return function () {\n        for (var method in methods) {\n          if (slider[method]) slider[method].apply(this, Array.from(methods.method));else $.error('Метод с именем ' + methods + ' не существует для jQuery.tooltip');\n        }\n      };\n    } else if (typeof methods === 'string') {\n      var _slider = new Controller(new View(), new Model());\n\n      return function () {\n        var _this = this;\n\n        Array.from(methods).forEach(function (method) {\n          if (_slider[method]) _slider[method].call(_this);else $.error('Метод с именем ' + methods + ' не существует для jQuery.tooltip');\n        });\n      };\n    } else {\n      return new Controller(new View(), new Model());\n    }\n  };\n})(jQuery);\n// EXTERNAL MODULE: ./src/modules/slider-call.ts\nvar slider_call = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./src/modules/fsd-slider.less\nvar fsd_slider = __webpack_require__(1);\n\n// EXTERNAL MODULE: ./src/modules/fsd-slider.pug\nvar modules_fsd_slider = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./src/app.ts\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n")}]);